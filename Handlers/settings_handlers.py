from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from Bot_menu.menu import create_inline_kb, kb_edit_positions
from FSMstate.FSMstate import FSMsettings
from Lexicon.lexicon_ru import LEXICON_RU
from create_bot import bot
from data_base.orm import get_exp_categories, get_inc_categories, edit_name_category, \
    add_inc_category_bd, add_exp_category_bd, update_position, update_limit, del_category_bd
from module_functions.users_function import get_redis_data, print_message_list_category, \
    print_message_setting_categoryes, user_old_operations_check

router: Router = Router()


@router.message(F.text == LEXICON_RU['settings_user'])
async def add_finance_user(message: Message):
    await message.answer(text=LEXICON_RU['settings_user'],
                         reply_markup=await create_inline_kb(1,
                                                             'set_',
                                                             LEXICON_RU['set_category'],
                                                             LEXICON_RU['set_help']))


''' –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫'''


@router.callback_query(F.data.startswith('set_'))
async def set_category_user(callback: CallbackQuery, state: FSMContext):
    tg_id = int(callback.from_user.id) if callback.message.chat.type == 'private' else int(callback.message.chat.id)

    set_item = callback.data.split('_')[-1]  # –ß—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if set_item == LEXICON_RU['set_category']:
        await print_message_setting_categoryes(tg_id=tg_id,
                                               callback=callback)
    elif set_item == LEXICON_RU['set_help']:
        await state.set_state(FSMsettings.help)

        await callback.message.answer(text='üìã–ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å‚ÄºÔ∏è\n'
                                           'üßëüèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è‚åõÔ∏è')

    await callback.answer()


'''–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤'''


@router.callback_query(F.data.startswith('setCategory_'))
async def set_category_user(callback: CallbackQuery):
    tg_id = int(callback.from_user.id) if callback.message.chat.type == 'private' else int(callback.message.chat.id)

    category = callback.data.split('_')[-1]  # –ß—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if category == LEXICON_RU['back_date_order']:  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        await bot.edit_message_text(text=LEXICON_RU['settings_user'],
                                    chat_id=tg_id,
                                    message_id=callback.message.message_id,
                                    reply_markup=await create_inline_kb(1,
                                                                        'set_',
                                                                        LEXICON_RU['set_category'],
                                                                        LEXICON_RU['set_help']))
    else:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –¥–æ—Ö–æ–¥–æ–≤
        await print_message_list_category(category=category,
                                          tg_id=tg_id,
                                          callback=callback)
    await callback.answer()


'''–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '''


@router.callback_query(F.data.startswith('SAC_'))
async def set_category_all_user(callback: CallbackQuery, state: FSMContext):
    tg_id = int(callback.from_user.id) if callback.message.chat.type == 'private' else int(callback.message.chat.id)
    operation = callback.data.split('_')[1]  # E/I
    category = callback.data.split('_')[-1]

    if category == LEXICON_RU['back_date_order']:
        await print_message_setting_categoryes(tg_id=tg_id,
                                               callback=callback)
    elif category == LEXICON_RU['add']:
        if operation == 'e':
            category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
            print(category_user)
            # –£–∑–Ω–∞–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_id = 0

            for item in category_user:
                if item[1] == category:
                    category_id = item[0]
                    break

            await callback.message.answer(text=LEXICON_RU['add_expenses_cat'])
            await state.set_state(FSMsettings.add_category)
            await state.update_data(operators=operation)
            await state.update_data(id_category=category_id)
            await state.update_data(id_message=callback.message.message_id)
        elif operation == 'i':
            category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
            # –£–∑–Ω–∞–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_id = 0

            for item in category_user:
                if item[1] == category:
                    category_id = item[0]
                    break
            await callback.message.answer(text=LEXICON_RU['add_income_cat'])
            await state.set_state(FSMsettings.add_category)
            await state.update_data(operators=operation)
            await state.update_data(id_category=category_id)
            await state.update_data(id_message=callback.message.message_id)
    else:
        if operation == 'e':
            category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
        elif operation == 'i':
            category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

        if category_user:
            categorys = [category[1] for category in category_user]
        else:  # –ï—Å–ª–∏ –≤ —Ä–µ–¥–∏—Å –Ω–µ—Ç
            if operation == 'e':
                categorys = await get_exp_categories(tg_id)  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
                category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
            elif operation == 'i':
                categorys = await get_inc_categories(tg_id)  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
                category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

        # –£–∑–Ω–∞–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_id = 0

        for item in category_user:
            if item[1] == category:
                category_id = item[0]
                break

        await bot.edit_message_text(chat_id=tg_id,
                                    message_id=callback.message.message_id,
                                    text=f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{category}"</b>',
                                    reply_markup=await create_inline_kb(1,
                                                                        f'eCat_{operation}_{category_id}_',
                                                                        LEXICON_RU['edit_name'],
                                                                        LEXICON_RU['edit_position'],
                                                                        LEXICON_RU['edit_summ'],
                                                                        LEXICON_RU['del_category'],
                                                                        LEXICON_RU['back_date_order']))
    await callback.answer()


'''–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π'''


@router.message(StateFilter(FSMsettings.add_category))
async def process_enter_name_comment(message: Message, state: FSMContext):
    tg_id = int(message.from_user.id) if message.chat.type == 'private' else int(message.chat.id)
    info_cat = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    message_id = info_cat['id_message']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
    operator = info_cat['operators']  # e/i
    old_operations = await user_old_operations_check(state)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

    category_expenses: list[str] = []
    if message.text:
        if operator == 'e':
            for text_category in message.text.split('\n'):
                category_expenses.append(text_category.replace('_', '').replace("'", '')
                                         .replace('"', ''))

            await add_exp_category_bd(tg_id=tg_id, category=category_expenses)  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ–Ω–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        elif operator == 'i':
            for text_category in message.text.split('\n'):
                category_expenses.append(text_category.replace('_', '').replace("'", ''))
            await add_inc_category_bd(tg_id=tg_id, category=category_expenses)  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤

        # –†–µ–¥–∞–∫—Ç–æ—Ä–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if operator == 'e':
            category = LEXICON_RU['expenses_cat']
        elif operator == 'i':
            category = LEXICON_RU['income_cat']

        if category == LEXICON_RU['income_cat']:
            category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

            if category_user:
                categorys = [category[1] for category in category_user]
            else:  # –ï—Å–ª–∏ –≤ —Ä–µ–¥–∏—Å –Ω–µ—Ç
                categorys = await get_inc_categories(tg_id)  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤

            await bot.edit_message_text(chat_id=tg_id,
                                        message_id=message_id,
                                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                        reply_markup=await create_inline_kb(1,
                                                                            f'SAC_i_',
                                                                            *categorys,
                                                                            LEXICON_RU['add'],
                                                                            LEXICON_RU['back_date_order']))
            await message.answer(text='‚úÖ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

        elif category == LEXICON_RU['expenses_cat']:  # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

            if category_user:
                categorys = [category[1] for category in category_user]
            else:  # –ï—Å–ª–∏ –≤ —Ä–µ–¥–∏—Å –Ω–µ—Ç
                categorys = await get_exp_categories(tg_id)  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤

            await bot.edit_message_text(chat_id=tg_id,
                                        message_id=message_id,
                                        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                        reply_markup=await create_inline_kb(1,
                                                                            f'SAC_e_',
                                                                            *categorys,
                                                                            LEXICON_RU['add'],
                                                                            LEXICON_RU['back_date_order']))
            await message.answer(text='‚úÖ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')


    else:
        await message.answer(text='–£–ü–°! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

    await state.clear()
    await state.update_data(user_check=True)
    await state.update_data(old_operations=old_operations)


'''–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é'''


@router.callback_query(F.data.startswith('eCat_'))
async def set_edit_category_user(callback: CallbackQuery, state: FSMContext):
    tg_id = int(callback.from_user.id) if callback.message.chat.type == 'private' else int(callback.message.chat.id)

    operator = callback.data.split('_')[1]  # —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ –¥–æ—Ö–æ–¥—ã e/i
    operations = callback.data.split('_')[-1]  # –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–±—Ä–∞–Ω–æ –∫–∞–∫–æ–µ
    category_id = callback.data.split('_')[2]  # id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    if operations == LEXICON_RU['edit_name']:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        await state.set_state(FSMsettings.name)
        await state.update_data(operators=operator)
        await state.update_data(id_category=category_id)
        await state.update_data(id_message=callback.message.message_id)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
                                           '<i>–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤</i>')
    elif operations == LEXICON_RU['edit_position']:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if operator == 'e':
            category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
        elif operator == 'i':
            category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

            # –£–∑–Ω–∞–µ–º id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        name = ''
        position = ''

        for item in category_user:
            if item[0] == int(category_id):
                name = item[1]
                position = item[2]
                break
        await bot.edit_message_text(chat_id=tg_id,
                                    message_id=callback.message.message_id,
                                    text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {name}\n'
                                         f'–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {position}\n\n'
                                         f'üîΩ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—éüîΩ',
                                    reply_markup=await kb_edit_positions(opetition=operator,
                                                                         id_trans=category_id,
                                                                         cor_position=position,
                                                                         all_position=len(category_user)))
    elif operations == LEXICON_RU['edit_summ']:  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É–º–º—ã
        await state.set_state(FSMsettings.limit)
        await state.update_data(operators=operator)
        await state.update_data(id_category=category_id)
        await state.update_data(id_message=callback.message.message_id)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç')

    elif operations == LEXICON_RU['del_category']:  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        del_category = await del_category_bd(category_id=category_id,
                                             operator=operator,
                                             tg_id=tg_id)

        if del_category:
            await print_message_list_category(category=operator,
                                              tg_id=tg_id,
                                              callback=callback)
        else:
            await callback.message.answer(text='–£–ü–°! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
    elif operations == LEXICON_RU['back_date_order']:  # –ù–∞–∑–∞–¥
        await print_message_list_category(category=operator,
                                          tg_id=tg_id,
                                          callback=callback)
    await callback.answer()


'''–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏'''


@router.message(StateFilter(FSMsettings.name))
async def process_enter_name_comment(message: Message, state: FSMContext):
    tg_id = int(message.from_user.id) if message.chat.type == 'private' else int(message.chat.id)
    info_cat = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    id_cat = info_cat['id_category']  # Id –∑–∞–ø–∏—Å–∏
    message_id = info_cat['id_message']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
    operator = info_cat['operators']  # e/i
    old_operations = await user_old_operations_check(state)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    edit_cat = await edit_name_category(id_cat=id_cat,
                                        operator=operator,
                                        tg_id=tg_id,
                                        new_name=message.text[:17])
    if edit_cat:
        await bot.edit_message_text(chat_id=tg_id,
                                    message_id=message_id,
                                    text=f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{message.text[:17]}"</b>',
                                    reply_markup=await create_inline_kb(1,
                                                                        f'eCat_{operator}_{id_cat}_',
                                                                        LEXICON_RU['edit_name'],
                                                                        LEXICON_RU['edit_position'],
                                                                        LEXICON_RU['edit_summ'],
                                                                        LEXICON_RU['del_category'],
                                                                        LEXICON_RU['back_date_order']))

        await message.answer(text='‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
        await state.clear()
        await state.update_data(user_check=True)
        await state.update_data(old_operations=old_operations)
    else:
        await message.answer(text=LEXICON_RU['edit_name_error'])


'''–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é'''


@router.callback_query(F.data.startswith('EPos_'))
async def set_edit_position_user(callback: CallbackQuery, state: FSMContext):
    tg_id = int(callback.from_user.id) if callback.message.chat.type == 'private' else int(callback.message.chat.id)

    action = callback.data.split('_')[-1]  # –ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–≤–µ—Ä—à–∞–µ–º
    operator = callback.data.split('_')[2]  # e/i
    position = int(callback.data.split('_')[1])  # –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    id_trans = callback.data.split('_')[-2]

    if operator == 'e':
        category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
    elif operator == 'i':
        category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

    '''–ó–î–ï–°–¨ –°–î–ï–õ–ê–¢–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï'''

    if action == 'back':
        if position > 1:
            position -= 1

            await bot.edit_message_reply_markup(chat_id=tg_id,
                                                message_id=callback.message.message_id,
                                                reply_markup=await kb_edit_positions(opetition=operator,
                                                                                     id_trans=id_trans,
                                                                                     cor_position=position,
                                                                                     all_position=len(category_user)))
    elif action == 'forward':
        if position < len(category_user):
            position += 1
            await bot.edit_message_reply_markup(chat_id=tg_id,
                                                message_id=callback.message.message_id,
                                                reply_markup=await kb_edit_positions(opetition=operator,
                                                                                     id_trans=id_trans,
                                                                                     cor_position=position,
                                                                                     all_position=len(category_user)))
    if action == 'cancel':
        for item in category_user:
            if item[0] == int(id_trans):
                category = item[1]
                break
        await bot.edit_message_text(chat_id=tg_id,
                                    message_id=callback.message.message_id,
                                    text=f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{category}"</b>',
                                    reply_markup=await create_inline_kb(1,
                                                                        f'eCat_{operator}_{id_trans}_',
                                                                        LEXICON_RU['edit_name'],
                                                                        LEXICON_RU['edit_position'],
                                                                        LEXICON_RU['edit_summ'],
                                                                        LEXICON_RU['del_category'],
                                                                        LEXICON_RU['back_date_order']))

    if action == 'done':
        for item in category_user:
            if item[0] == int(id_trans):
                old_position = item[2]
                category = item[1]
                break

        await update_position(id_trans=id_trans,
                              operator=operator,
                              new_position=position,
                              old_position=old_position,
                              tg_id=tg_id)

        await bot.edit_message_text(chat_id=tg_id,
                                    message_id=callback.message.message_id,
                                    text=f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>"{category}"</b>',
                                    reply_markup=await create_inline_kb(1,
                                                                        f'eCat_{operator}_{id_trans}_',
                                                                        LEXICON_RU['edit_name'],
                                                                        LEXICON_RU['edit_position'],
                                                                        LEXICON_RU['edit_summ'],
                                                                        LEXICON_RU['del_category'],
                                                                        LEXICON_RU['back_date_order']))

    await callback.answer()


'''–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞'''


@router.message(StateFilter(FSMsettings.limit))
async def process_enter_name_comment(message: Message, state: FSMContext):
    old_operations = await user_old_operations_check(state)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if message.text:
        text = message.text.replace(',', '.')
        if is_float(text):
            limit = float(text)
            tg_id = int(message.from_user.id) if message.chat.type == 'private' else int(message.chat.id)
            info_cat = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
            id_cat = info_cat['id_category']  # Id –∑–∞–ø–∏—Å–∏
            operator = info_cat['operators']  # e/i

            new_limit = await update_limit(id_cat=id_cat,
                                           tg_id=tg_id,
                                           operator=operator,
                                           new_limit=limit)

            if new_limit:

                if operator == 'e':
                    category_user = await get_redis_data(f'categories_exp:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis
                elif operator == 'i':
                    category_user = await get_redis_data(f'categories_inc:{tg_id}')  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ Redis

                for item in category_user:
                    if item[0] == int(id_cat):
                        category = item[1]
                        break

                await message.answer(text='‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')

            else:
                await message.answer(text='–£–ü–°! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
        else:
            await message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç')
    else:
        await message.answer(text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç')

    await state.clear()
    await state.update_data(user_check=True)
    await state.update_data(old_operations=old_operations)


def is_float(text):
    try:
        float_value = float(text)
        return True
    except ValueError:
        return False

'''–ü–û–î–î–ï–†–ñ–ö–ê'''

@router.message(StateFilter(FSMsettings.help))
async def process_enter_name_comment(message: Message, state: FSMContext):
    try:
        await message.send_copy(chat_id=6451994483)
    except TypeError:
        await message.reply(
            text='–î–∞–Ω–Ω—ã–π —Ç–∏–ø –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è '
                 '–º–µ—Ç–æ–¥–æ–º send_copy'
        )
    await state.clear()
    await state.update_data(user_check=True)
    old_operations = await user_old_operations_check(state)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    await state.update_data(old_operations=old_operations)