from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from Bot_menu.menu import create_inline_kb
from Lexicon.lexicon_ru import LEXICON_RU
from data_base.orm import get_data_personal_bd

router: Router = Router()


@router.message(F.text == 'personal_account')
@router.message(F.text == LEXICON_RU['personal_account_user'])
async def add_finance_user(message: Message):
    tg_id = int(message.from_user.id) if message.chat.type == 'private' else int(message.chat.id)

    data_personal = await get_data_personal_bd(tg_id=tg_id)

    balance = '{:,}'.format(data_personal["balance"]).replace(',', ' ')  # –ë–∞–ª–∞–Ω—Å
    total_incomes = '{:,}'.format(data_personal["total_incomes"]).replace(',', ' ')  # –°—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤
    total_expenses = '{:,}'.format(data_personal["total_expenses"]).replace(',', ' ')  # –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    income_categories_count = data_personal["income_categories_count"]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
    expense_categories_count = data_personal["expense_categories_count"]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
    incomes_current_month = '{:,}'.format(data_personal["incomes_current_month"]).replace(',',
                                                                                          ' ')  # –°—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    expenses_current_month = '{:,}'.format(data_personal["expenses_current_month"]).replace(',',
                                                                                            ' ')  # –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ

    subscription = f'<b>üóìÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <code>{data_personal["subscription"]}</code>' \
        if data_personal["subscription"] else 'üòî–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ü§¶üèº‚Äç‚ôÇÔ∏è'
    text = (f'<b><u>üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç</u></b>\n\n'
            f'<b>üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>{balance} —Ä—É–±.</code>\n\n'
            f'<b>üìà –î–æ—Ö–æ–¥—ã</b>\n'
            f'  - <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</b> <code>{income_categories_count}</code>\n'
            f'  - <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> <code>{total_incomes} —Ä—É–±.</code>\n'
            f'  - <b>–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> <code>{incomes_current_month} —Ä—É–±.</code>\n\n'
            f'<b>üìâ –†–∞—Å—Ö–æ–¥—ã</b>\n'
            f'  - <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–π:</b> <code>{expense_categories_count}</code>\n'
            f'  - <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> <code>{total_expenses} —Ä—É–±.</code>\n'
            f'  - <b>–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> <code>{expenses_current_month} —Ä—É–±.</code>\n\n'
            f'{subscription}')

    await message.answer(text=text,
                         reply_markup= await create_inline_kb(1,
                                                              'sub_',
                                                              LEXICON_RU['planned_exp'],
                                                              LEXICON_RU['subscription'],
                                                              ))
